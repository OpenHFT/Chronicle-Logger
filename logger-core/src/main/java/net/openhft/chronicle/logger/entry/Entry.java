// automatically generated by the FlatBuffers compiler, do not modify

package net.openhft.chronicle.logger.entry;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Entry extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static Entry getRootAsEntry(ByteBuffer _bb) { return getRootAsEntry(_bb, new Entry()); }
  public static Entry getRootAsEntry(ByteBuffer _bb, Entry obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Entry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int id(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int idLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector idVector() { return idVector(new ByteVector()); }
  public ByteVector idVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public boolean mutateId(int j, int id) { int o = __offset(4); if (o != 0) { bb.put(__vector(o) + j * 1, (byte)id); return true; } else { return false; } }
  public net.openhft.chronicle.logger.entry.EntryTimestamp timestamp() { return timestamp(new net.openhft.chronicle.logger.entry.EntryTimestamp()); }
  public net.openhft.chronicle.logger.entry.EntryTimestamp timestamp(net.openhft.chronicle.logger.entry.EntryTimestamp obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public long level() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public boolean mutateLevel(long level) { int o = __offset(8); if (o != 0) { bb.putInt(o + bb_pos, (int)level); return true; } else { return false; } }
  public String loggerName() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer loggerNameAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer loggerNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public String threadName() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer threadNameAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer threadNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public int content(int j) { int o = __offset(14); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int contentLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector contentVector() { return contentVector(new ByteVector()); }
  public ByteVector contentVector(ByteVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer contentAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer contentInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  public boolean mutateContent(int j, int content) { int o = __offset(14); if (o != 0) { bb.put(__vector(o) + j * 1, (byte)content); return true; } else { return false; } }
  public String contentType() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer contentTypeAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer contentTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  public String contentEncoding() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer contentEncodingAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer contentEncodingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }

  public static void startEntry(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static int createIdVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createIdVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startIdVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addTimestamp(FlatBufferBuilder builder, int timestampOffset) { builder.addStruct(1, timestampOffset, 0); }
  public static void addLevel(FlatBufferBuilder builder, long level) { builder.addInt(2, (int)level, (int)0L); }
  public static void addLoggerName(FlatBufferBuilder builder, int loggerNameOffset) { builder.addOffset(3, loggerNameOffset, 0); }
  public static void addThreadName(FlatBufferBuilder builder, int threadNameOffset) { builder.addOffset(4, threadNameOffset, 0); }
  public static void addContent(FlatBufferBuilder builder, int contentOffset) { builder.addOffset(5, contentOffset, 0); }
  public static int createContentVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createContentVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startContentVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addContentType(FlatBufferBuilder builder, int contentTypeOffset) { builder.addOffset(6, contentTypeOffset, 0); }
  public static void addContentEncoding(FlatBufferBuilder builder, int contentEncodingOffset) { builder.addOffset(7, contentEncodingOffset, 0); }
  public static int endEntry(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 10);  // logger_name
    return o;
  }
  public static void finishEntryBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedEntryBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Entry get(int j) { return get(new Entry(), j); }
    public Entry get(Entry obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}


package net.openhft.chronicle.logger.log4j2;

import org.apache.logging.log4j.LogManager;
import org.junit.BeforeClass;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

/**
 * see https://blog.cloudflare.com/inside-the-log4j2-vulnerability-cve-2021-44228/ etc.
 *
 * This is not a proper unit test - just some exploratory code
 */
public class Log4j2VulnerabilityTest extends Log4j2TestBase {

    public static final String VULNERABILITY = "${jndi:ldap://localhost/xxxx}";

    @BeforeClass
    public static void systemProperties() {
        System.setProperty("com.sun.jndi.rmi.object.trustURLCodebase", "true");
    }

    /**
     * Run this test with -Dlog4j2.debug and you will not see any JNDI-related logging - see below
     */
    @Test
    public void testVulnerability() throws IOException {
        final String testId = "chronicle";
        final String threadId = testId + "-th";
        final Logger logger = LoggerFactory.getLogger(testId);

        Thread.currentThread().setName(threadId);
        Files.createDirectories(Paths.get(basePath(testId)));

        logger.error(VULNERABILITY);
    }

    /**
     * Run this test with -Dlog4j2.debug and you will see
     * <pre>
     * {@code WARN StatusLogger Error looking up JNDI resource [ldap://localhost/xxxx]}
     * </pre>
     */
    @Test
    public void testVulnerabilityLog4j2() {
        LogManager.getLogger("HelloWorld").error(VULNERABILITY);
    }
}
